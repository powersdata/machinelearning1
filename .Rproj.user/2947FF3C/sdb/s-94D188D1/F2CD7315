{
    "contents" : "---\ntitle: \"Predictive Barbell Lifts\"\nauthor: \"Ted Powers\"\ndate: \"Jan 21, 2015\"\noutput: html_document\n---\n\n###Summary\nIn this project, data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants will be used.  From this data, the goal is to predict which of the 5 classes of dumbell lifts was performed and whether the exercise was performed correctly.  \n\nIn order to reproduce the same results, you need a certain set of packages, as well as setting a pseudo random seed equal to the one I used.\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nlibrary(klaR)\nlibrary(abind)\nlibrary(arm)\nlibrary(caret)\n#library(ggplot2)\nlibrary(randomForest)\nlibrary(kernlab)\n\nlibrary(rattle)\n\nset.seed(42)\n```\n\n\n###Data\nThe training data for this project are available here: \n\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\n\nThe test data are available here: \n\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\n\nMore information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \n\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nsetwd(\"~/GitHub/machinelearning1\")\nif (!dir.exists(\"data\")) { dir.create(\"data\")}\n\ntrainUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\ntrainFile <- \"train.csv\"\ntrainFilePath <- paste(getwd(),\"data\", trainFile, sep = \"/\")\n\ntestUrl <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\ntestFile <- \"test.csv\"\ntestFilePath <- paste(getwd(),\"data\", testFile, sep = \"/\")\n\n## Download Files from internet only if not in data directory\nif (!file.exists(paste(getwd(), \"data\", \"train.csv\", sep =\"/\"))) {\n        setInternet2(use = TRUE)\n        download.file(trainUrl, destfile = trainFilePath)\n}\n\nif (!file.exists(paste(getwd(), \"data\", \"test.csv\", sep =\"/\"))) {\n        setInternet2(use = TRUE)\n        download.file(testUrl, destfile = testFilePath)\n}\n\n## load the file from disk only if it \n## hasn't already been read into a variable\nif(!(exists(\"tran\"))) {\n        tran <- read.csv(trainFilePath, na.strings = c(\"NA\",\"#DIV/0!\",\"\"))\n}\nif(!(exists(\"test\"))) {\n        test <- read.csv(testFilePath, na.strings = c(\"NA\",\"#DIV/0!\",\"\"))\n}\n\nrm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)\n```\n\n###Training-Set cleaning and pre-processing\n\nNames’s Coherence Check\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nall.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])\n```\n\nTo ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nnearzero <- nearZeroVar(tran, saveMetrics = TRUE)\n\ntran_orig <- tran\n\ntran <- tran[, !nearzero$nzv]\n\n```\n\nVariables with more than 20% missing values are removed\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\ntoberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))\n        {return(TRUE)}\n        else{return(FALSE)\n}\n)\ntran_t1 <- tran\n\ntran <- tran[, !toberem]\n```\n\nVariables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\ntran_t2 <- tran\ntran <- tran[, -(1:6)]\n```\n\nCorrelation analysis:\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nHcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)\nnames(tran)[Hcorr]\n```\n\nMany variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nnames(tran)\n```\n\n\n###Partioning the training set into two\nPartioning Training data set into two data sets, 60% for myTrain, 40% for myTest:\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\ninTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)\n\ntran_t3 <- tran\nmyTest <- tran[-inTrain, ]\ntran <- tran[inTrain, ]\ndim(tran); dim(myTest)\n\n```\n\n```{r, echo=T, message=FALSE, warning=FALSE, results=\"as-is\"}\nhead(test)\nhead(tran)\n\n```\n\n##Model Specification and Cross Validation\n\nIn order to avoid overfitting and to reduce out of sample errors, TrainControl is used to perform 7-fold cross validation.\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\ntc <- trainControl(method = \"cv\", number = 7, verboseIter=FALSE , preProcOptions=\"pca\", allowParallel=TRUE)\n```\n\nSix models are estimated: Random forest, Support Vector Machine (both radial and linear), a Neural net, a Bayes Generalized linear model and a Logit Boosted model.\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nrf <- train(classe ~ ., data = tran, method = \"rf\", trControl= tc)\nsvmr <- train(classe ~ ., data = tran, method = \"svmRadial\", trControl= tc)\nNN <- train(classe ~ ., data = tran, method = \"nnet\", trControl= tc, verbose=FALSE)\nsvml <- train(classe ~ ., data = tran, method = \"svmLinear\", trControl= tc)\nbayesglm <- train(classe ~ ., data = tran, method = \"bayesglm\", trControl= tc)\nlogitboost <- train(classe ~ ., data = tran, method = \"LogitBoost\", trControl= tc)\n```\n\nAccuracy comparision\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nmodel <- c(\"Random Forest\", \"SVM (radial)\",\"LogitBoost\",\"SVM (linear)\",\"Neural Net\", \"Bayes GLM\")\nAccuracy <- c(max(rf$results$Accuracy),\n        max(svmr$results$Accuracy),\n        max(logitboost$results$Accuracy),\n        max(svml$results$Accuracy),\n        max(NN$results$Accuracy),\n        max(bayesglm$results$Accuracy))\n        \nKappa <- c(max(rf$results$Kappa),\n        max(svmr$results$Kappa),\n        max(logitboost$results$Kappa),\n        max(svml$results$Kappa),\n        max(NN$results$Kappa),\n        max(bayesglm$results$Kappa))  \n\nperformance <- cbind(model,Accuracy,Kappa)\nknitr::kable(performance)\n```\n\nRandom forest and SVM(radial) provide the best results and will provide the predictions for the submission. Even if the Out of sample error cannot be estimated exactly, the in-sample error obtained through cross-validation is calculated over different test sets and should provide a better estimate of out-of sample error with respect to the case of no cross-validation.\n\n##Prediction of “classe” variable for the test set\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nrfPred <- predict(rf, test)\nsvmrPred <- predict(svmr, test)\n```\n\nChecking if the models give same predictions\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\nprediction <- data.frame(cbind(rfPred, svmrPred))\nprediction$same <- with(prediction, rfPred == svmrPred)\ncolnames(prediction) <- c(\"Random Forest\", \"SVM (radial)\", \"Same Prediction\")\nknitr::kable(prediction)\n```\n\nGeneration of the files to be submitted is made through the provided function\n\n```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results=\"hide\"}\npml_write_files = function(x){\n        n = length(x)\n        for(i in 1:n){\n                filename = paste0(\"problem_id_\",i,\".txt\")\n                write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n        }\n}\n\npml_write_files(rfPred)\npml_write_files(svmrPred)\n```\n\n##Conclusions\nThe random forest model provides an outstanding accuracy and, accordingly, the predictions for the test set were correct in 100% of the cases.\n",
    "created" : 1452191931237.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3911966024",
    "id" : "F2CD7315",
    "lastKnownWriteTime" : 1452804680,
    "path" : "~/GitHub/machinelearning1/PredictiveBarbellLifts.Rmd",
    "project_path" : "PredictiveBarbellLifts.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}