```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
###Partioning the training set into two
Partioning Training data set into two data sets, 60% for myTrain, 40% for myTest:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
inTrain <- createDataPartition(y=tran$classe, p=0.6, list=FALSE)
myTrain <- tran[inTrain, ]; myTest <- tran[-inTrain, ]
dim(myTrain); dim(myTest)
toberem
tc <- trainControl(method = "cv", number = 7, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
tran_t3 <- tran
Test
test
rm(myTrain)
tran <- tran[inTrain, ]; myTest <- tran[-inTrain, ]
---
title: "Predictive Barbell Lifts"
author: "Ted Powers"
date: "Jan 21, 2015"
output: html_document
---
###Summary
In this project, data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants will be used.  From this data, the goal is to predict which of the 5 classes of dumbell lifts was performed and whether the exercise was performed correctly.
In order to reproduce the same results, you need a certain set of packages, as well as setting a pseudo random seed equal to the one I used.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
library(caret)
#library(ggplot2)
set.seed(42)
```
###Data
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
setwd("~/GitHub/machinelearning1")
if (!dir.exists("data")) { dir.create("data")}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- "train.csv"
trainFilePath <- paste(getwd(),"data", trainFile, sep = "/")
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- "test.csv"
testFilePath <- paste(getwd(),"data", testFile, sep = "/")
## Download Files from internet only if not in data directory
if (!file.exists(paste(getwd(), "data", "train.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(trainUrl, destfile = trainFilePath)
}
if (!file.exists(paste(getwd(), "data", "test.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(testUrl, destfile = testFilePath)
}
## load the file from disk only if it
## hasn't already been read into a variable
if(!(exists("tran"))) {
tran <- read.csv(trainFilePath, na.strings = c("NA","#DIV/0!",""))
}
if(!(exists("test"))) {
test <- read.csv(testFilePath, na.strings = c("NA","#DIV/0!",""))
}
rm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)
```
###Training-Set cleaning and pre-processing
Names’s Coherence Check
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])
```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Correlation analysis:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
inTrain <- createDataPartition(y=tran$classe, p=0.6, list=FALSE)
tran_t3 <- tran
tran <- tran[inTrain, ]; myTest <- tran[-inTrain, ]
dim(tran); dim(myTest)
inTrain <- createDataPartition(y=tran$classe, p=1, list=FALSE)
inTrain <- createDataPartition(y=tran$classe, p=1, list=FALSE)
tran <- tran_t3
inTrain <- createDataPartition(y=tran$classe, p=1, list=FALSE)
inTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)
tran_t3 <- tran
tran <- tran[inTrain, ]; myTest <- tran[-inTrain, ]
tran_t3 <- tran
---
title: "Predictive Barbell Lifts"
author: "Ted Powers"
date: "Jan 21, 2015"
output: html_document
---
###Summary
In this project, data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants will be used.  From this data, the goal is to predict which of the 5 classes of dumbell lifts was performed and whether the exercise was performed correctly.
In order to reproduce the same results, you need a certain set of packages, as well as setting a pseudo random seed equal to the one I used.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
library(caret)
#library(ggplot2)
set.seed(42)
```
###Data
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
setwd("~/GitHub/machinelearning1")
if (!dir.exists("data")) { dir.create("data")}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- "train.csv"
trainFilePath <- paste(getwd(),"data", trainFile, sep = "/")
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- "test.csv"
testFilePath <- paste(getwd(),"data", testFile, sep = "/")
## Download Files from internet only if not in data directory
if (!file.exists(paste(getwd(), "data", "train.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(trainUrl, destfile = trainFilePath)
}
if (!file.exists(paste(getwd(), "data", "test.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(testUrl, destfile = testFilePath)
}
## load the file from disk only if it
## hasn't already been read into a variable
if(!(exists("tran"))) {
tran <- read.csv(trainFilePath, na.strings = c("NA","#DIV/0!",""))
}
if(!(exists("test"))) {
test <- read.csv(testFilePath, na.strings = c("NA","#DIV/0!",""))
}
rm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)
```
###Training-Set cleaning and pre-processing
Names’s Coherence Check
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])
```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Correlation analysis:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
###Partioning the training set into two
Partioning Training data set into two data sets, 60% for myTrain, 40% for myTest:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
inTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)
tran_t3 <- tran
myTest <- tran[-inTrain, ]
tran <- tran[inTrain, ]
dim(tran); dim(myTest)
tc <- trainControl(method = "cv", number = 7, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
rf <- train(classe ~ ., data = tran, method = "rf", trControl= tc)
install.packages("randomForest")
install.packages("klaR")
install.packages("rattle")
library(caret)
#library(ggplot2)
library(randomForest)
library(kernlab)
library(klaR)
library(rattle)
set.seed(42)
```
###Data
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
setwd("~/GitHub/machinelearning1")
if (!dir.exists("data")) { dir.create("data")}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- "train.csv"
trainFilePath <- paste(getwd(),"data", trainFile, sep = "/")
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- "test.csv"
testFilePath <- paste(getwd(),"data", testFile, sep = "/")
## Download Files from internet only if not in data directory
if (!file.exists(paste(getwd(), "data", "train.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(trainUrl, destfile = trainFilePath)
}
if (!file.exists(paste(getwd(), "data", "test.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(testUrl, destfile = testFilePath)
}
## load the file from disk only if it
## hasn't already been read into a variable
if(!(exists("tran"))) {
tran <- read.csv(trainFilePath, na.strings = c("NA","#DIV/0!",""))
}
if(!(exists("test"))) {
test <- read.csv(testFilePath, na.strings = c("NA","#DIV/0!",""))
}
rm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)
```
###Training-Set cleaning and pre-processing
Names’s Coherence Check
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])
```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Correlation analysis:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
###Partioning the training set into two
Partioning Training data set into two data sets, 60% for myTrain, 40% for myTest:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
inTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)
tran_t3 <- tran
myTest <- tran[-inTrain, ]
tran <- tran[inTrain, ]
dim(tran); dim(myTest)
```
```{r, echo=T, message=FALSE, warning=FALSE, results="as-is"}
head(test)
head(tran)
```
##Model Specification and Cross Validation
In order to avoid overfitting and to reduce out of sample errors, TrainControl is used to perform 7-fold cross validation.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tc <- trainControl(method = "cv", number = 7, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
```
Six models are estimated: Random forest, Support Vector Machine (both radial and linear), a Neural net, a Bayes Generalized linear model and a Logit Boosted model.
library(caret)
#library(ggplot2)
library(randomForest)
library(kernlab)
library(klaR)
install.packages("MASS")
library(caret)
#library(ggplot2)
library(randomForest)
library(kernlab)
library(klaR)
library(rattle)
library(klaR)
library(caret)
#library(ggplot2)
library(randomForest)
library(kernlab)
library(rattle)
set.seed(42)
setwd("~/GitHub/machinelearning1")
if (!dir.exists("data")) { dir.create("data")}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- "train.csv"
trainFilePath <- paste(getwd(),"data", trainFile, sep = "/")
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- "test.csv"
testFilePath <- paste(getwd(),"data", testFile, sep = "/")
## Download Files from internet only if not in data directory
if (!file.exists(paste(getwd(), "data", "train.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(trainUrl, destfile = trainFilePath)
}
if (!file.exists(paste(getwd(), "data", "test.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(testUrl, destfile = testFilePath)
}
## load the file from disk only if it
## hasn't already been read into a variable
if(!(exists("tran"))) {
tran <- read.csv(trainFilePath, na.strings = c("NA","#DIV/0!",""))
}
if(!(exists("test"))) {
test <- read.csv(testFilePath, na.strings = c("NA","#DIV/0!",""))
}
rm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)
```
###Training-Set cleaning and pre-processing
Names’s Coherence Check
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])
```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Correlation analysis:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
###Partioning the training set into two
Partioning Training data set into two data sets, 60% for myTrain, 40% for myTest:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
inTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)
tran_t3 <- tran
myTest <- tran[-inTrain, ]
tran <- tran[inTrain, ]
dim(tran); dim(myTest)
tc <- trainControl(method = "cv", number = 7, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
rf <- train(classe ~ ., data = tran, method = "rf", trControl= tc)
library(klaR)
library(abind)
library(arm)
library(caret)
#library(ggplot2)
library(randomForest)
library(kernlab)
library(rattle)
set.seed(42)
setwd("~/GitHub/machinelearning1")
if (!dir.exists("data")) { dir.create("data")}
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- "train.csv"
trainFilePath <- paste(getwd(),"data", trainFile, sep = "/")
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- "test.csv"
testFilePath <- paste(getwd(),"data", testFile, sep = "/")
## Download Files from internet only if not in data directory
if (!file.exists(paste(getwd(), "data", "train.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(trainUrl, destfile = trainFilePath)
}
if (!file.exists(paste(getwd(), "data", "test.csv", sep ="/"))) {
setInternet2(use = TRUE)
download.file(testUrl, destfile = testFilePath)
}
## load the file from disk only if it
## hasn't already been read into a variable
if(!(exists("tran"))) {
tran <- read.csv(trainFilePath, na.strings = c("NA","#DIV/0!",""))
}
if(!(exists("test"))) {
test <- read.csv(testFilePath, na.strings = c("NA","#DIV/0!",""))
}
rm(testFile, testFilePath, testUrl, trainFile, trainFilePath, trainUrl)
```
###Training-Set cleaning and pre-processing
Names’s Coherence Check
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(tran)[1:length(colnames(tran))-1])
```
To ease the computation and due to the low informativity loss, the dataset is cleaned from the variables with an high share of NAs and from the ones characterized by low variance.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
nearzero <- nearZeroVar(tran, saveMetrics = TRUE)
tran_orig <- tran
tran <- tran[, !nearzero$nzv]
```
Variables with more than 20% missing values are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
toberem <- sapply(colnames(tran), function(x) if(sum(is.na(tran[, x])) > 0.20*nrow(tran))
{return(TRUE)}
else{return(FALSE)
}
)
tran_t1 <- tran
tran <- tran[, !toberem]
```
Variables related with data acquisition (like: id, timestamps, individuals’ names, etc.) are not suitable to be used in prediction and are removed
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tran_t2 <- tran
tran <- tran[, -(1:6)]
```
Correlation analysis:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
Hcorr <- caret::findCorrelation(cor(tran[, -53]), cutoff=0.6)
names(tran)[Hcorr]
```
Many variables are highly correlated. PCA will be used in the pre-processing. After the data cleaning the variables selected to specify the model are:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
names(tran)
```
###Partioning the training set into two
Partioning Training data set into two data sets, 60% for myTrain, 40% for myTest:
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
inTrain <- createDataPartition(y=tran$classe, p=.6, list=FALSE)
tran_t3 <- tran
myTest <- tran[-inTrain, ]
tran <- tran[inTrain, ]
dim(tran); dim(myTest)
```
```{r, echo=T, message=FALSE, warning=FALSE, results="as-is"}
head(test)
head(tran)
```
##Model Specification and Cross Validation
In order to avoid overfitting and to reduce out of sample errors, TrainControl is used to perform 7-fold cross validation.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
tc <- trainControl(method = "cv", number = 7, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
```
Six models are estimated: Random forest, Support Vector Machine (both radial and linear), a Neural net, a Bayes Generalized linear model and a Logit Boosted model.
```{r, echo=F, message=FALSE, warning=FALSE, cache = TRUE, results="hide"}
rf <- train(classe ~ ., data = tran, method = "rf", trControl= tc)
